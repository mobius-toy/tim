// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `OpResponse`, `OpStatus`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `create_failed_response`, `create_read_request`, `create_success_response`, `create_timeout_response`, `create_write_request`, `new_notify`, `new_read`, `new_write`, `serialize`, `to_debug_string`
// These functions are ignored (category: IgnoreBecauseOwnerTyShouldIgnore): `failed`, `is_failed`, `is_success`, `is_timeout`, `success`, `timeout`

/// 操作动作枚举
enum OpAction {
  read,
  write,
  notify,
  subscribe,
  unsubscribe,
  unknown,
}

enum OpCmd {
  updateBattery,
}

/// 操作请求结构体
class OpRequest {
  final OpCmd? cmd;
  final OpAction? action;
  final Uint8List? data;
  final bool asyncOp;
  final bool ack;

  const OpRequest({
    this.cmd,
    this.action,
    this.data,
    required this.asyncOp,
    required this.ack,
  });

  bool isActionNotify() =>
      RustLib.instance.api.crateApiCmdOpRequestIsActionNotify(
        that: this,
      );

  /// 检查是否为读取操作
  bool isActionRead() => RustLib.instance.api.crateApiCmdOpRequestIsActionRead(
    that: this,
  );

  bool isActionSubscribe() =>
      RustLib.instance.api.crateApiCmdOpRequestIsActionSubscribe(
        that: this,
      );

  bool isActionUnsubscribe() =>
      RustLib.instance.api.crateApiCmdOpRequestIsActionUnsubscribe(
        that: this,
      );

  /// 检查是否为写入操作
  bool isActionWrite() =>
      RustLib.instance.api.crateApiCmdOpRequestIsActionWrite(
        that: this,
      );

  @override
  int get hashCode =>
      cmd.hashCode ^
      action.hashCode ^
      data.hashCode ^
      asyncOp.hashCode ^
      ack.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OpRequest &&
          runtimeType == other.runtimeType &&
          cmd == other.cmd &&
          action == other.action &&
          data == other.data &&
          asyncOp == other.asyncOp &&
          ack == other.ack;
}
