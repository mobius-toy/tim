// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'cmd.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'task.dart';

String initDeviceRegistry() =>
    RustLib.instance.api.crateApiBleInitDeviceRegistry();

/// 创建设备任务流
Stream<BleTask> createDeviceTaskStream({
  required String deviceId,
  required String deviceName,
}) => RustLib.instance.api.crateApiBleCreateDeviceTaskStream(
  deviceId: deviceId,
  deviceName: deviceName,
);

/// 移除设备任务流
Future<String> removeDeviceTaskStream({required String deviceId}) =>
    RustLib.instance.api.crateApiBleRemoveDeviceTaskStream(deviceId: deviceId);

/// 标记任务完成
Future<String> completeDeviceTask({
  required String deviceId,
  required BigInt taskId,
  required bool success,
  Uint8List? data,
  String? error,
}) => RustLib.instance.api.crateApiBleCompleteDeviceTask(
  deviceId: deviceId,
  taskId: taskId,
  success: success,
  data: data,
  error: error,
);

Future<Map<String, String>> initializeDevice({required String deviceId}) =>
    RustLib.instance.api.crateApiBleInitializeDevice(deviceId: deviceId);

/// 写入电机控制
Future<String> writeDeviceMotorControl({
  required String deviceId,
  required List<int> pwmValues,
}) => RustLib.instance.api.crateApiBleWriteDeviceMotorControl(
  deviceId: deviceId,
  pwmValues: pwmValues,
);

/// 停止电机
Future<String> writeDeviceMotorStop({required String deviceId}) =>
    RustLib.instance.api.crateApiBleWriteDeviceMotorStop(deviceId: deviceId);
