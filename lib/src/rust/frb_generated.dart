// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/ble.dart';
import 'api/cmd.dart';
import 'api/log.dart';
import 'api/task.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 851826769;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'tim_frb',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<String> crateApiBleCompleteDeviceTask({
    required String deviceId,
    required BigInt taskId,
    required bool success,
    Uint8List? data,
    String? error,
  });

  Stream<BleTask> crateApiBleCreateDeviceTaskStream({
    required String deviceId,
    required String deviceName,
  });

  Stream<LogEntry> crateApiBleCreateLogStream();

  String crateApiBleInitDeviceRegistry();

  Future<Map<String, String>> crateApiBleInitializeDevice({
    required String deviceId,
  });

  Future<LogEntry> crateApiLogLogEntryNew({
    required LogLevel level,
    required String message,
    required String module,
  });

  Future<String> crateApiLogLogLevelAsStr({required LogLevel that});

  bool crateApiCmdOpRequestIsActionNotify({required OpRequest that});

  bool crateApiCmdOpRequestIsActionRead({required OpRequest that});

  bool crateApiCmdOpRequestIsActionSubscribe({required OpRequest that});

  bool crateApiCmdOpRequestIsActionUnsubscribe({required OpRequest that});

  bool crateApiCmdOpRequestIsActionWrite({required OpRequest that});

  Future<String> crateApiBleRemoveDeviceTaskStream({required String deviceId});

  Future<String> crateApiBleWriteDeviceMotorControl({
    required String deviceId,
    required List<int> pwmValues,
  });

  Future<String> crateApiBleWriteDeviceMotorStop({required String deviceId});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> crateApiBleCompleteDeviceTask({
    required String deviceId,
    required BigInt taskId,
    required bool success,
    Uint8List? data,
    String? error,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deviceId, serializer);
          sse_encode_u_64(taskId, serializer);
          sse_encode_bool(success, serializer);
          sse_encode_opt_list_prim_u_8_strict(data, serializer);
          sse_encode_opt_String(error, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleCompleteDeviceTaskConstMeta,
        argValues: [deviceId, taskId, success, data, error],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBleCompleteDeviceTaskConstMeta =>
      const TaskConstMeta(
        debugName: "complete_device_task",
        argNames: ["deviceId", "taskId", "success", "data", "error"],
      );

  @override
  Stream<BleTask> crateApiBleCreateDeviceTaskStream({
    required String deviceId,
    required String deviceName,
  }) {
    final taskSink = RustStreamSink<BleTask>();
    handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deviceId, serializer);
          sse_encode_String(deviceName, serializer);
          sse_encode_StreamSink_ble_task_Sse(taskSink, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleCreateDeviceTaskStreamConstMeta,
        argValues: [deviceId, deviceName, taskSink],
        apiImpl: this,
      ),
    );
    return taskSink.stream;
  }

  TaskConstMeta get kCrateApiBleCreateDeviceTaskStreamConstMeta =>
      const TaskConstMeta(
        debugName: "create_device_task_stream",
        argNames: ["deviceId", "deviceName", "taskSink"],
      );

  @override
  Stream<LogEntry> crateApiBleCreateLogStream() {
    final logSink = RustStreamSink<LogEntry>();
    handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_StreamSink_log_entry_Sse(logSink, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleCreateLogStreamConstMeta,
        argValues: [logSink],
        apiImpl: this,
      ),
    );
    return logSink.stream;
  }

  TaskConstMeta get kCrateApiBleCreateLogStreamConstMeta => const TaskConstMeta(
    debugName: "create_log_stream",
    argNames: ["logSink"],
  );

  @override
  String crateApiBleInitDeviceRegistry() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleInitDeviceRegistryConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBleInitDeviceRegistryConstMeta =>
      const TaskConstMeta(
        debugName: "init_device_registry",
        argNames: [],
      );

  @override
  Future<Map<String, String>> crateApiBleInitializeDevice({
    required String deviceId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deviceId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_Map_String_String_None,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleInitializeDeviceConstMeta,
        argValues: [deviceId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBleInitializeDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_device",
        argNames: ["deviceId"],
      );

  @override
  Future<LogEntry> crateApiLogLogEntryNew({
    required LogLevel level,
    required String message,
    required String module,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_log_level(level, serializer);
          sse_encode_String(message, serializer);
          sse_encode_String(module, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLogLogEntryNewConstMeta,
        argValues: [level, message, module],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLogLogEntryNewConstMeta => const TaskConstMeta(
    debugName: "log_entry_new",
    argNames: ["level", "message", "module"],
  );

  @override
  Future<String> crateApiLogLogLevelAsStr({required LogLevel that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_log_level(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiLogLogLevelAsStrConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiLogLogLevelAsStrConstMeta => const TaskConstMeta(
    debugName: "log_level_as_str",
    argNames: ["that"],
  );

  @override
  bool crateApiCmdOpRequestIsActionNotify({required OpRequest that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_op_request(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCmdOpRequestIsActionNotifyConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCmdOpRequestIsActionNotifyConstMeta =>
      const TaskConstMeta(
        debugName: "op_request_is_action_notify",
        argNames: ["that"],
      );

  @override
  bool crateApiCmdOpRequestIsActionRead({required OpRequest that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_op_request(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCmdOpRequestIsActionReadConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCmdOpRequestIsActionReadConstMeta =>
      const TaskConstMeta(
        debugName: "op_request_is_action_read",
        argNames: ["that"],
      );

  @override
  bool crateApiCmdOpRequestIsActionSubscribe({required OpRequest that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_op_request(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCmdOpRequestIsActionSubscribeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCmdOpRequestIsActionSubscribeConstMeta =>
      const TaskConstMeta(
        debugName: "op_request_is_action_subscribe",
        argNames: ["that"],
      );

  @override
  bool crateApiCmdOpRequestIsActionUnsubscribe({required OpRequest that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_op_request(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCmdOpRequestIsActionUnsubscribeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCmdOpRequestIsActionUnsubscribeConstMeta =>
      const TaskConstMeta(
        debugName: "op_request_is_action_unsubscribe",
        argNames: ["that"],
      );

  @override
  bool crateApiCmdOpRequestIsActionWrite({required OpRequest that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_op_request(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCmdOpRequestIsActionWriteConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCmdOpRequestIsActionWriteConstMeta =>
      const TaskConstMeta(
        debugName: "op_request_is_action_write",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiBleRemoveDeviceTaskStream({required String deviceId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deviceId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleRemoveDeviceTaskStreamConstMeta,
        argValues: [deviceId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBleRemoveDeviceTaskStreamConstMeta =>
      const TaskConstMeta(
        debugName: "remove_device_task_stream",
        argNames: ["deviceId"],
      );

  @override
  Future<String> crateApiBleWriteDeviceMotorControl({
    required String deviceId,
    required List<int> pwmValues,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deviceId, serializer);
          sse_encode_list_prim_i_32_loose(pwmValues, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleWriteDeviceMotorControlConstMeta,
        argValues: [deviceId, pwmValues],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBleWriteDeviceMotorControlConstMeta =>
      const TaskConstMeta(
        debugName: "write_device_motor_control",
        argNames: ["deviceId", "pwmValues"],
      );

  @override
  Future<String> crateApiBleWriteDeviceMotorStop({required String deviceId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deviceId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiBleWriteDeviceMotorStopConstMeta,
        argValues: [deviceId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiBleWriteDeviceMotorStopConstMeta =>
      const TaskConstMeta(
        debugName: "write_device_motor_stop",
        argNames: ["deviceId"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  RustStreamSink<BleTask> dco_decode_StreamSink_ble_task_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BleTask dco_decode_ble_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return BleTask(
      taskId: dco_decode_u_64(arr[0]),
      deviceId: dco_decode_String(arr[1]),
      uuid: dco_decode_String(arr[2]),
      op: dco_decode_op_request(arr[3]),
      priority: dco_decode_ble_task_priority(arr[4]),
    );
  }

  @protected
  BleTaskPriority dco_decode_ble_task_priority(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BleTaskPriority.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  OpAction dco_decode_box_autoadd_op_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_op_action(raw);
  }

  @protected
  OpCmd dco_decode_box_autoadd_op_cmd(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_op_cmd(raw);
  }

  @protected
  OpRequest dco_decode_box_autoadd_op_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_op_request(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<int> dco_decode_list_prim_i_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Int32List dco_decode_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int32List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      level: dco_decode_log_level(arr[0]),
      message: dco_decode_String(arr[1]),
      timestamp: dco_decode_String(arr[2]),
      module: dco_decode_String(arr[3]),
    );
  }

  @protected
  LogLevel dco_decode_log_level(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LogLevel.values[raw as int];
  }

  @protected
  OpAction dco_decode_op_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpAction.values[raw as int];
  }

  @protected
  OpCmd dco_decode_op_cmd(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OpCmd.values[raw as int];
  }

  @protected
  OpRequest dco_decode_op_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return OpRequest(
      cmd: dco_decode_opt_box_autoadd_op_cmd(arr[0]),
      action: dco_decode_opt_box_autoadd_op_action(arr[1]),
      data: dco_decode_opt_list_prim_u_8_strict(arr[2]),
      asyncOp: dco_decode_bool(arr[3]),
      ack: dco_decode_bool(arr[4]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  OpAction? dco_decode_opt_box_autoadd_op_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_op_action(raw);
  }

  @protected
  OpCmd? dco_decode_opt_box_autoadd_op_cmd(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_op_cmd(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<BleTask> sse_decode_StreamSink_ble_task_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BleTask sse_decode_ble_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taskId = sse_decode_u_64(deserializer);
    var var_deviceId = sse_decode_String(deserializer);
    var var_uuid = sse_decode_String(deserializer);
    var var_op = sse_decode_op_request(deserializer);
    var var_priority = sse_decode_ble_task_priority(deserializer);
    return BleTask(
      taskId: var_taskId,
      deviceId: var_deviceId,
      uuid: var_uuid,
      op: var_op,
      priority: var_priority,
    );
  }

  @protected
  BleTaskPriority sse_decode_ble_task_priority(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BleTaskPriority.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  OpAction sse_decode_box_autoadd_op_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_op_action(deserializer));
  }

  @protected
  OpCmd sse_decode_box_autoadd_op_cmd(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_op_cmd(deserializer));
  }

  @protected
  OpRequest sse_decode_box_autoadd_op_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_op_request(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<int> sse_decode_list_prim_i_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Int32List sse_decode_list_prim_i_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_level = sse_decode_log_level(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_String(deserializer);
    var var_module = sse_decode_String(deserializer);
    return LogEntry(
      level: var_level,
      message: var_message,
      timestamp: var_timestamp,
      module: var_module,
    );
  }

  @protected
  LogLevel sse_decode_log_level(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LogLevel.values[inner];
  }

  @protected
  OpAction sse_decode_op_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return OpAction.values[inner];
  }

  @protected
  OpCmd sse_decode_op_cmd(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return OpCmd.values[inner];
  }

  @protected
  OpRequest sse_decode_op_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_cmd = sse_decode_opt_box_autoadd_op_cmd(deserializer);
    var var_action = sse_decode_opt_box_autoadd_op_action(deserializer);
    var var_data = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_asyncOp = sse_decode_bool(deserializer);
    var var_ack = sse_decode_bool(deserializer);
    return OpRequest(
      cmd: var_cmd,
      action: var_action,
      data: var_data,
      asyncOp: var_asyncOp,
      ack: var_ack,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OpAction? sse_decode_opt_box_autoadd_op_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_op_action(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OpCmd? sse_decode_opt_box_autoadd_op_cmd(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_op_cmd(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_ble_task_Sse(
    RustStreamSink<BleTask> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_ble_task,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(
    RustStreamSink<LogEntry> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_log_entry,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_ble_task(BleTask self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.taskId, serializer);
    sse_encode_String(self.deviceId, serializer);
    sse_encode_String(self.uuid, serializer);
    sse_encode_op_request(self.op, serializer);
    sse_encode_ble_task_priority(self.priority, serializer);
  }

  @protected
  void sse_encode_ble_task_priority(
    BleTaskPriority self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_op_action(
    OpAction self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_op_action(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_op_cmd(OpCmd self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_op_cmd(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_op_request(
    OpRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_op_request(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_i_32_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(
      self is Int32List ? self : Int32List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_i_32_strict(
    Int32List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_log_level(self.level, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.timestamp, serializer);
    sse_encode_String(self.module, serializer);
  }

  @protected
  void sse_encode_log_level(LogLevel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_op_action(OpAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_op_cmd(OpCmd self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_op_request(OpRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_op_cmd(self.cmd, serializer);
    sse_encode_opt_box_autoadd_op_action(self.action, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.data, serializer);
    sse_encode_bool(self.asyncOp, serializer);
    sse_encode_bool(self.ack, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_op_action(
    OpAction? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_op_action(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_op_cmd(
    OpCmd? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_op_cmd(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
