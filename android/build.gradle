group = "com.mobius.tim"
version = "1.0-SNAPSHOT"

def timFrbVersion = "0.0.2" // 默认版本
def envFile = new File(projectDir.parentFile, "tim_frb_version.env")
if (envFile.exists()) {
    def envContent = envFile.text
    def versionMatch = envContent =~ /TIM_FRB_VERSION=(\d+\.\d+\.\d+)/
    if (versionMatch) {
        timFrbVersion = versionMatch[0][1]
    }
}

def timFrbArchiveName = "tim_frb-artifacts-v${timFrbVersion}.zip"
def timFrbDownloadUrl = "https://github.com/mobius-toy/tim_artifacts/releases/download/v${timFrbVersion}/${timFrbArchiveName}"
def timFrbWorkDir = new File(buildDir, "timFrb")
def timFrbArchive = new File(timFrbWorkDir, timFrbArchiveName)
def timFrbJniLibsDir = new File(timFrbWorkDir, "jniLibs")

buildscript {
    ext.kotlin_version = "2.1.0"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.9.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "com.mobius.tim"

    compileSdk = project.hasProperty('flutter.compileSdkVersion') 
        ? flutter.compileSdkVersion 
        : 34

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
        main.jniLibs.srcDir timFrbJniLibsDir
    }

    defaultConfig {
        minSdk = 24
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}

tasks.register("fetchTimFrbArtifacts") {
    outputs.dir timFrbJniLibsDir
    doLast {
        timFrbWorkDir.mkdirs()

        if (!timFrbArchive.exists()) {
            logger.lifecycle("Downloading tim_frb artifacts ${timFrbArchiveName} from ${timFrbDownloadUrl}")
            ant.get(src: timFrbDownloadUrl, dest: timFrbArchive)
        }

        delete timFrbJniLibsDir
        copy {
            from(zipTree(timFrbArchive)) {
                include "**/android/**"
            }
            into timFrbJniLibsDir
            includeEmptyDirs = false
            eachFile { details ->
                def marker = "android/"
                def idx = details.path.indexOf(marker)
                if (idx >= 0) {
                    if (details.isDirectory()) {
                        details.exclude()
                    } else {
                        details.path = details.path.substring(idx + marker.length())
                    }
                }
            }
        }
    }
}

tasks.matching { it.name == "preBuild" }.configureEach {
    dependsOn("fetchTimFrbArtifacts")
}
